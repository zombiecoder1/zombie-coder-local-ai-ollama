#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‡¶∏‡¶¨ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã‡¶∞ Master Script
‡¶∏‡¶¨ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü ‡¶è‡¶ï ‡¶è‡¶ï ‡¶ï‡¶∞‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶Ø‡¶º ‡¶è‡¶¨‡¶Ç ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá
"""

import subprocess
import time
import json
from pathlib import Path
from datetime import datetime

class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    MAGENTA = '\033[95m'
    END = '\033[0m'
    BOLD = '\033[1m'

def print_header(text: str):
    print(f"\n{Colors.BOLD}{Colors.CYAN}{'='*80}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.CYAN}{text:^80}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.CYAN}{'='*80}{Colors.END}\n")

def print_success(text: str):
    print(f"{Colors.GREEN}‚úì {text}{Colors.END}")

def print_error(text: str):
    print(f"{Colors.RED}‚úó {text}{Colors.END}")

def print_warning(text: str):
    print(f"{Colors.YELLOW}‚ö† {text}{Colors.END}")

def print_info(text: str):
    print(f"{Colors.BLUE}‚Ñπ {text}{Colors.END}")

def run_test(test_file: Path, timeout: int = 60) -> dict:
    """‡¶è‡¶ï‡¶ü‡¶ø ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü ‡¶ö‡¶æ‡¶≤‡¶æ‡¶Ø‡¶º"""
    test_name = test_file.stem
    print(f"\n{Colors.BOLD}{Colors.MAGENTA}‚ñ∫ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶ö‡¶≤‡¶õ‡ßá: {test_name}{Colors.END}")
    print(f"  ‡¶´‡¶æ‡¶á‡¶≤: {test_file.name}")
    
    result = {
        "name": test_name,
        "file": test_file.name,
        "start_time": datetime.now().isoformat(),
        "success": False,
        "duration": 0,
        "output": "",
        "error": ""
    }
    
    try:
        start_time = time.time()
        
        # ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®
        process = subprocess.run(
            ["python", str(test_file)],
            capture_output=True,
            text=True,
            timeout=timeout,
            cwd=test_file.parent
        )
        
        result["duration"] = time.time() - start_time
        result["output"] = process.stdout
        result["error"] = process.stderr
        result["returncode"] = process.returncode
        
        if process.returncode == 0:
            result["success"] = True
            print_success(f"‡¶™‡¶æ‡¶∏! ‡¶∏‡¶Æ‡¶Ø‡¶º: {result['duration']:.1f}s")
        else:
            print_error(f"‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•! (exitcode: {process.returncode})")
            if process.stderr:
                print(f"{Colors.RED}{process.stderr[:500]}{Colors.END}")
        
    except subprocess.TimeoutExpired:
        result["duration"] = timeout
        result["error"] = f"Timeout after {timeout}s"
        print_error(f"‡¶ü‡¶æ‡¶á‡¶Æ‡¶Ü‡¶â‡¶ü! ({timeout}s)")
    except Exception as e:
        result["error"] = str(e)
        print_error(f"‡¶è‡¶∞‡¶∞: {str(e)}")
    
    result["end_time"] = datetime.now().isoformat()
    return result

def main():
    print_header("ZombieCoder Local AI - ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶∏‡ßç‡¶Ø‡ßÅ‡¶ü")
    print_info(f"‡¶∏‡¶Æ‡¶Ø‡¶º: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    test_dir = Path(__file__).parent
    
    # ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ (‡¶ï‡ßç‡¶∞‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∏‡¶æ‡¶∞‡ßá)
    test_files = sorted([
        f for f in test_dir.glob("*.py")
        if f.name.startswith(("01_", "02_", "03_", "04_", "05_", "06_", "07_"))
        and f.name != "run_all_tests.py"
    ])
    
    if not test_files:
        print_error("‡¶ï‡ßã‡¶®‡ßã ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø!")
        return
    
    print_info(f"‡¶Æ‡ßã‡¶ü {len(test_files)} ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá")
    for tf in test_files:
        print(f"  - {tf.name}")
    
    # ‡¶∏‡¶¨ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®
    results = []
    passed = 0
    failed = 0
    
    start_time = time.time()
    
    for i, test_file in enumerate(test_files, 1):
        print(f"\n{Colors.BOLD}[{i}/{len(test_files)}]{Colors.END}")
        
        # Set timeout based on test
        timeout = 60
        if "lifecycle" in test_file.name or "gguf" in test_file.name:
            timeout = 120  # Model loading tests need more time
        
        result = run_test(test_file, timeout=timeout)
        results.append(result)
        
        if result["success"]:
            passed += 1
        else:
            failed += 1
        
        # Wait a bit between tests
        if i < len(test_files):
            time.sleep(2)
    
    total_duration = time.time() - start_time
    
    # ‡¶∏‡¶æ‡¶∞‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™
    print_header("‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü - ‡¶∏‡¶æ‡¶∞‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™")
    
    print(f"\n{Colors.BOLD}‡¶∏‡¶æ‡¶Æ‡¶ó‡ßç‡¶∞‡¶ø‡¶ï ‡¶´‡¶≤‡¶æ‡¶´‡¶≤:{Colors.END}")
    print(f"  ‡¶Æ‡ßã‡¶ü ‡¶ü‡ßá‡¶∏‡ßç‡¶ü: {len(results)}")
    print(f"  {Colors.GREEN}‚úì ‡¶™‡¶æ‡¶∏: {passed}{Colors.END}")
    print(f"  {Colors.RED}‚úó ‡¶´‡ßá‡¶á‡¶≤: {failed}{Colors.END}")
    print(f"  ‡¶Æ‡ßã‡¶ü ‡¶∏‡¶Æ‡¶Ø‡¶º: {total_duration:.1f}s")
    
    print(f"\n{Colors.BOLD}‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£:{Colors.END}")
    for result in results:
        status = f"{Colors.GREEN}‚úì ‡¶™‡¶æ‡¶∏{Colors.END}" if result["success"] else f"{Colors.RED}‚úó ‡¶´‡ßá‡¶á‡¶≤{Colors.END}"
        duration = result.get("duration", 0)
        print(f"  {status} - {result['name']} ({duration:.1f}s)")
    
    # JSON ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£
    report_file = test_dir / "test_report.json"
    report = {
        "timestamp": datetime.now().isoformat(),
        "total": len(results),
        "passed": passed,
        "failed": failed,
        "duration": total_duration,
        "tests": results
    }
    
    with open(report_file, "w", encoding="utf-8") as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    print_info(f"\n‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶ø‡¶§: {report_file}")
    
    # ‡¶∏‡¶´‡¶≤‡¶§‡¶æ‡¶∞ ‡¶π‡¶æ‡¶∞
    success_rate = (passed / len(results) * 100) if results else 0
    print(f"\n{Colors.BOLD}‡¶∏‡¶´‡¶≤‡¶§‡¶æ‡¶∞ ‡¶π‡¶æ‡¶∞: {success_rate:.1f}%{Colors.END}")
    
    if failed == 0:
        print_header("üéâ ‡¶∏‡¶¨ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶∏‡¶´‡¶≤! üéâ")
    else:
        print_header(f"‚ö† {failed} ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")
    
    return 0 if failed == 0 else 1

if __name__ == "__main__":
    exit(main())

