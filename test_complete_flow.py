#!/usr/bin/env python3
"""
ZombieCoder - рж╕ржорзНржкрзВрж░рзНржг ржлрзНрж▓рзЛ ржЯрзЗрж╕рзНржЯ
Token тЖТ Available тЖТ Download тЖТ Load тЖТ Generate тЖТ Unload
"""
import requests
import time
import json

BASE = "http://127.0.0.1:8155"

def log(msg, status="info"):
    colors = {"ok": "\033[92m", "warn": "\033[93m", "err": "\033[91m", "info": "\033[96m"}
    print(f"{colors.get(status, '')}{msg}\033[0m")

def wait_server():
    log("тП│ рж╕рж╛рж░рзНржнрж╛рж░ ржЪрзЗржХ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...", "info")
    for i in range(30):
        try:
            r = requests.get(f"{BASE}/health", timeout=2)
            if r.ok:
                log(f"тЬЕ рж╕рж╛рж░рзНржнрж╛рж░ ржкрзНрж░рж╕рзНрждрзБржд: {r.json()}", "ok")
                return True
        except:
            time.sleep(1)
    log("тЭМ рж╕рж╛рж░рзНржнрж╛рж░ рж░рзЗрж╕ржкржирзНрж╕ ржХрж░ржЫрзЗ ржирж╛", "err")
    return False

def save_token(token):
    log(f"ЁЯФС ржЯрзЛржХрзЗржи рж╕рзЗржн ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...", "info")
    try:
        r = requests.post(f"{BASE}/auth/hf_token", json={"token": token}, timeout=10)
        if r.ok:
            log(f"тЬЕ ржЯрзЛржХрзЗржи рж╕рзЗржн рж╕ржлрж▓: {r.json()}", "ok")
            return True
    except Exception as e:
        log(f"тЭМ ржЯрзЛржХрзЗржи рж╕рзЗржн ржмрзНржпрж░рзНрже: {e}", "err")
    return False

def get_available():
    log("ЁЯУЛ ржЙржкрж▓ржмрзНржз ржоржбрзЗрж▓ рж▓рж┐рж╕рзНржЯ...", "info")
    try:
        r = requests.get(f"{BASE}/models/available", timeout=10)
        if r.ok:
            data = r.json()
            log(f"тЬЕ {len(data)} ржЯрж┐ ржоржбрзЗрж▓ ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ", "ok")
            for m in data[:3]:
                print(f"   - {m.get('name')} ({m.get('size', 'N/A')})")
            return data
    except Exception as e:
        log(f"тЭМ рж▓рж┐рж╕рзНржЯ ржмрзНржпрж░рзНрже: {e}", "err")
    return []

def download_model(model_name, repo_id):
    log(f"тмЗя╕П  ржбрж╛ржЙржирж▓рзЛржб рж╢рзБрж░рзБ: {model_name} ({repo_id})", "info")
    try:
        r = requests.post(f"{BASE}/download/start", json={"model_name": model_name, "repo_id": repo_id}, timeout=15)
        if r.ok:
            log(f"тЬЕ ржбрж╛ржЙржирж▓рзЛржб рж╢рзБрж░рзБ рж╣ржпрж╝рзЗржЫрзЗ: {r.json()}", "ok")
            # Poll status
            for i in range(60):
                time.sleep(3)
                status = requests.get(f"{BASE}/download/status/{model_name}", timeout=10).json()
                log(f"   рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕: {status.get('status', 'unknown')}", "info")
                if status.get('status') == 'completed':
                    log(f"тЬЕ ржбрж╛ржЙржирж▓рзЛржб рж╕ржорзНржкржирзНржи!", "ok")
                    return True
                elif status.get('status') == 'failed':
                    log(f"тЭМ ржбрж╛ржЙржирж▓рзЛржб ржмрзНржпрж░рзНрже", "err")
                    return False
    except Exception as e:
        log(f"тЭМ ржбрж╛ржЙржирж▓рзЛржб ржПрж░рж░: {e}", "err")
    return False

def load_model(model_name):
    log(f"ЁЯФД ржоржбрзЗрж▓ рж▓рзЛржб ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ: {model_name}", "info")
    try:
        r = requests.post(f"{BASE}/runtime/load/{model_name}", timeout=120)
        if r.ok:
            data = r.json()
            log(f"тЬЕ ржоржбрзЗрж▓ рж▓рзЛржб рж╕ржлрж▓: ржкрзЛрж░рзНржЯ {data.get('port')}, PID {data.get('pid')}", "ok")
            return data
    except Exception as e:
        log(f"тЭМ рж▓рзЛржб ржмрзНржпрж░рзНрже: {e}", "err")
    return None

def generate(model_name, prompt="Hello, who are you?"):
    log(f"ЁЯТм ржЯрзЗржХрзНрж╕ржЯ ржЬрзЗржирж╛рж░рзЗржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...", "info")
    try:
        r = requests.post(f"{BASE}/api/generate", json={"model": model_name, "prompt": prompt, "stream": False}, timeout=180)
        if r.ok:
            data = r.json()
            log(f"тЬЕ рж░рзЗрж╕ржкржирзНрж╕: {json.dumps(data, indent=2)}", "ok")
            return data
    except Exception as e:
        log(f"тЭМ ржЬрзЗржирж╛рж░рзЗржЯ ржмрзНржпрж░рзНрже: {e}", "err")
    return None

def unload_model(model_name):
    log(f"тП╣я╕П  ржоржбрзЗрж▓ ржЖржирж▓рзЛржб ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ: {model_name}", "info")
    try:
        r = requests.post(f"{BASE}/runtime/unload/{model_name}", timeout=30)
        if r.ok:
            log(f"тЬЕ ржоржбрзЗрж▓ ржЖржирж▓рзЛржб рж╕ржлрж▓", "ok")
            return True
    except Exception as e:
        log(f"тЭМ ржЖржирж▓рзЛржб ржмрзНржпрж░рзНрже: {e}", "err")
    return False

def main():
    log("тХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХР", "info")
    log("  ZombieCoder - рж╕ржорзНржкрзВрж░рзНржг ржлрзНрж▓рзЛ ржЯрзЗрж╕рзНржЯ", "info")
    log("тХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХР", "info")
    
    if not wait_server():
        return
    
    # Step 1: Save token (placeholder)
    token = "REPLACE_WITH_YOUR_HF_TOKEN"
    if not save_token(token):
        log("тЪая╕П  ржЯрзЛржХрзЗржи рж╕рзЗржн ржирж╛ рж╣рж▓рзЗржУ ржЪрж╛рж▓рж┐ржпрж╝рзЗ ржпрж╛ржЪрзНржЫрж┐...", "warn")
    
    # Step 2: Get available models
    available = get_available()
    
    # Step 3: Check installed models
    log("ЁЯУж ржЗржирж╕рзНржЯрж▓ржб ржоржбрзЗрж▓ ржЪрзЗржХ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...", "info")
    try:
        r = requests.get(f"{BASE}/models/installed", timeout=10)
        if r.ok:
            inst = r.json()
            log(f"тЬЕ {inst.get('count', 0)} ржЯрж┐ ржоржбрзЗрж▓ ржЗржирж╕рзНржЯрж▓ ржХрж░рж╛ ржЖржЫрзЗ", "ok")
            if inst.get('models'):
                # Use first installed model
                first_model = inst['models'][0]['name']
                log(f"ЁЯОп ржоржбрзЗрж▓ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржмрзЗ: {first_model}", "info")
                
                # Load
                loaded = load_model(first_model)
                if loaded:
                    time.sleep(5)  # Wait for model to be ready
                    
                    # Generate
                    generate(first_model, "What is 2+2?")
                    
                    # Unload
                    time.sleep(2)
                    unload_model(first_model)
                
                log("тХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХР", "ok")
                log("  тЬЕ рж╕ржорзНржкрзВрж░рзНржг ржлрзНрж▓рзЛ рж╕ржлрж▓!", "ok")
                log("тХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХР", "ok")
                return
    except Exception as e:
        log(f"тЭМ ржЗржирж╕рзНржЯрж▓ржб ржЪрзЗржХ ржПрж░рж░: {e}", "err")
    
    log("тЪая╕П  ржХрзЛржирзЛ ржоржбрзЗрж▓ ржЗржирж╕рзНржЯрж▓ ржирзЗржЗред UI ржерзЗржХрзЗ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзБржи:", "warn")
    log(f"   http://127.0.0.1:8155/static/allindex.html", "info")

if __name__ == "__main__":
    main()
